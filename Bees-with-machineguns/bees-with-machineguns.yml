AWSTemplateFormatVersion: '2010-09-09'
Description: Create a spot-priced AutoScaling group and a Bees With Machine Guns controller;
  execute the load test against the AutoScaling group and store the results in S3.
  Run /home/ec2-user/run-bees to execute load tests manually.
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: String
  BeesControllerInstanceType:
    Description: Type of EC2 instance to launch
    Type: String
    Default: c1.medium
    AllowedValues: [t1.micro, m1.small, m1.medium, m1.large, m1.xlarge, m2.xlarge,
      m2.2xlarge, m2.4xlarge, c1.medium, c1.xlarge, cc1.4xlarge]
    ConstraintDescription: Must be a valid EC2 instance type.
  TotalConnections:
    Description: Total connections per load tester
    Type: Number
    Default: '200000'
  SpotPrice:
    Description: Spot price for application AutoScaling Group
    Type: Number
    MinValue: '0'
  ConcurrentConnections:
    Description: Number of concurrent requests per load tester
    Type: Number
    Default: '1000'
  BeeCount:
    Description: Number of EC2 instances to launch as the load generators (bees)
    Type: Number
    Default: '2'
  AppInstanceType:
    Description: Type of EC2 instant for application AutoScaling Group
    Type: String
    Default: c1.medium
    AllowedValues: [t1.micro, m1.small, m1.medium, m1.large, m1.xlarge, m2.xlarge,
      m2.2xlarge, m2.4xlarge, c1.medium, c1.xlarge, cc1.4xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  AppInstanceCountMin:
    Description: Minimum number of EC2 instances to launch for application AutoScaling
      Group
    Type: Number
    Default: '2'
  AppInstanceCountMax:
    Description: Maximum number of EC2 instances to launch for application AutoScaling
      Group
    Type: Number
    Default: '2'
  AppInstanceCountDesired:
    Description: Desired number of EC2 instances to launch for application AutoScaling
      Group
    Type: Number
    Default: '2'
  RunTests:
    Description: 'Enter ''true'' to run tests immediately. WARNING: CreateStack will
      not finish until test executes if this is set to ''true'''
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    ConstraintDescription: Must be 'true' or 'false'.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSRegionPlatform2AMI:
    us-east-1:
      amzn: ami-e565ba8c
      bee: ami-e661c18f
    us-west-1:
      amzn: ami-e78cd4a2
      bee: ami-93b5efd6
    eu-west-1:
      amzn: ami-f9231b8d
      bee: ami-67212413
    ap-southeast-1:
      amzn: ami-be3374ec
      bee: ami-38bef86a
    ap-northeast-1:
      amzn: ami-e47acbe5
      bee: ami-16ac1f17
    us-west-2:
      amzn: ami-3ac64a0a
      bee: ami-bc05898c
    sa-east-1:
      amzn: ami-a6855bbb
      bee: ami-5a12cc47
Resources:
  CfnUser:
    Type: AWS::IAM::User
    Properties:
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: cloudformation:DescribeStackResource
            Resource: '*'
          - Effect: Allow
            Action: elasticloadbalancing:DescribeInstanceHealth
            Resource: '*'
          - Effect: Allow
            Action: ec2:*
            Resource: '*'
  CfnKeys:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref 'CfnUser'
  ResultBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
    DeletionPolicy: Retain
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Id: MyPolicy
        Statement:
        - Sid: AllAccess
          Action: ['s3:*']
          Effect: Allow
          Resource: !Join ['', ['arn:aws:s3:::', !Ref 'ResultBucket', /*]]
          Principal:
            AWS: !GetAtt [CfnUser, Arn]
      Bucket: !Ref 'ResultBucket'
  BeeController:
    Type: AWS::EC2::Instance
    DependsOn: AppGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              gcc: []
              gcc-c++: []
              make: []
              openssl-devel: []
              httpd: []
              python-paramiko: []
              gmp-devel: []
              python26-devel: []
            python:
              beeswithmachineguns: []
          files:
            /home/ec2-user/create-keypair:
              content: !Join ['', ['#!/usr/bin/python

                    ', 'import string

                    ', 'import random

                    ', 'import boto.ec2

                    ', 'kp_name = ''''.join(random.choice(string.letters) for i in
                    xrange(16))

                    ', ec2 = boto.ec2.connect_to_region(', !Ref 'AWS::Region', ''')

                    ', 'keypair = ec2.create_key_pair(kp_name)

                    ', 'keypair.save(''/home/ec2-user/.ssh/'')

                    ', 'with file(''/home/ec2-user/bees_keypair.txt'', ''w'') as f:

                    ', '     f.write(kp_name)

                    ', 'print ''Created keypair: %s'' % kp_name

                    ']]
              mode: '000750'
              owner: ec2-user
              group: ec2-user
            /home/ec2-user/delete-keypair:
              content: !Join ['', ['#!/usr/bin/python

                    ', 'import string

                    ', 'import random

                    ', 'import boto.ec2

                    ', 'import os

                    ', 'import sys

                    ', 'if not os.path.exists(''/home/ec2-user/bees_keypair.txt''):

                    ', '     print >> sys.stderr, ''bees_keypair.txt does not exist''

                    ', '     sys.exit(-1)

                    ', 'with file(''/home/ec2-user/bees_keypair.txt'', ''r'') as f:

                    ', '     kp_name = f.read().strip()

                    ', ec2 = boto.ec2.connect_to_region(', !Ref 'AWS::Region', ''')

                    ', 'ec2.delete_key_pair(kp_name)

                    ', 'os.remove(''/home/ec2-user/bees_keypair.txt'')

                    ', 'os.remove(''/home/ec2-user/.ssh/%s.pem'' % kp_name)

                    ', 'print ''Deleted keypair: %s'' % kp_name

                    ']]
              mode: '000750'
              owner: ec2-user
              group: ec2-user
            /home/ec2-user/create-swarm:
              content: !Join ['', ['#!/bin/bash

                    ', '/usr/bin/bees up -k `cat /home/ec2-user/bees_keypair.txt`
                    -s ', !Ref 'BeeCount', ' -z ', !Select ['1', !GetAZs ''], ' -g ',
                  !Ref 'BeeSecurityGroup', ' --instance ', !FindInMap [AWSRegionPlatform2AMI,
                    !Ref 'AWS::Region', bee], ' --login ec2-user

                    ']]
              mode: '000755'
              owner: ec2-user
              group: ec2-user
            /home/ec2-user/start-swarm:
              content: !Join ['', ['#!/bin/bash

                    ', '/usr/bin/bees attack --url http://', !GetAtt [ElasticLoadBalancer,
                    DNSName], /, ' -n ', !Ref 'TotalConnections', ' --concurrent ',
                  !Ref 'ConcurrentConnections']]
              mode: '000755'
              owner: ec2-user
              group: ec2-user
            /home/ec2-user/kill-swarm:
              content: !Join ['', ['#!/bin/bash

                    ', '/usr/bin/bees down

                    ']]
              mode: '000755'
              owner: ec2-user
              group: ec2-user
            /home/ec2-user/.boto:
              content: !Join ['', ['[Credentials]

                    ', 'aws_access_key_id = ', !Ref 'CfnKeys', '

                    ', 'aws_secret_access_key = ', !GetAtt [CfnKeys, SecretAccessKey],
                  '

                    ', '[Boto]

                    ', 'ec2_region_name = ', !Ref 'AWS::Region', '

                    ', ec2_region_endpoint = ec2., !Ref 'AWS::Region', '.amazonaws.com

                    ', 'elb_region_name = ', !Ref 'AWS::Region', '

                    ', elb_region_endpoint = elasticloadbalancing., !Ref 'AWS::Region',
                  '.amazonaws.com

                    ']]
              mode: '000600'
              owner: ec2-user
              group: ec2-user
            /home/ec2-user/run-bees:
              content: !Join ['', ['#!/bin/bash


                    ', '/home/ec2-user/wait-for-elb

                    ', 'if [ $? -eq 0 ]

                    ', 'then

                    ', '  mkdir /home/ec2-user/swarm-results

                    ', '  /home/ec2-user/create-keypair > /home/ec2-user/swarm-results/create-keypair.log
                    2>&1

                    ', '  bash /home/ec2-user/create-swarm > /home/ec2-user/swarm-results/create-swarm.log
                    2>&1

                    ', '  sleep 45 # Allow EC2 instances to fully come up

                    ', '  bash /home/ec2-user/start-swarm > /home/ec2-user/swarm-results/start-swarm.log
                    2>&1

                    ', '  bash /home/ec2-user/kill-swarm > /home/ec2-user/swarm-results/kill-swarm.log
                    2>&1

                    ', '  /home/ec2-user/delete-keypair > /home/ec2-user/swarm-results/delete-keypair.log
                    2>&1

                    ', '  tar cvf /home/ec2-user/swarm-results.tar.gz /home/ec2-user/swarm-results/*

                    ', '  chown ec2-user:ec2-user -R /home/ec2-user/swarm-results

                    ', '  chown ec2-user:ec2-user /home/ec2-user/swarm-results.tar.gz

                    ', '  aws put ', !Ref 'ResultBucket', '/swarm-results.tar.gz /home/ec2-user/swarm-results.tar.gz

                    ', 'else

                    ', '  exit 1

                    ', 'fi

                    ']]
              mode: '000755'
              owner: ec2-user
              group: ec2-user
            /home/ec2-user/wait-for-elb:
              content: !Join ['', ['#!/usr/bin/python

                    ', 'import boto.ec2.elb

                    ', 'import sys

                    ', 'import time

                    ', 'elb = boto.ec2.elb.ELBConnection()

                    ', 'for i in range(120):

                    ', '   if i > 0:

                    ', '      time.sleep(5)

                    ', '   health=elb.describe_instance_health(''', !Ref 'ElasticLoadBalancer',
                  ''')

                    ', '   healthy_instances = [i for i in health if i.state == ''InService'']

                    ', '   if len(healthy_instances) == ', !Ref 'AppInstanceCountDesired',
                  ':

                    ', '      break

                    ', 'else:

                    ', '   print >> sys.stderr, ''Gave up waiting for ', !Ref 'AppInstanceCountDesired',
                  'instances.''

                    ', '   sys.exit(1)

                    ']]
              mode: '000750'
              owner: ec2-user
              group: ec2-user
            /home/ec2-user/tools/aws:
              source: https://raw.github.com/timkay/aws/master/aws
              mode: '000755'
              owner: ec2-user
              group: ec2-user
            /home/ec2-user/.awssecret:
              content: !Join ['', [!Ref 'CfnKeys', '

                    ', !GetAtt [CfnKeys, SecretAccessKey]]]
              mode: '000600'
              owner: ec2-user
              group: ec2-user
            /root/.awssecret:
              content: !Join ['', [!Ref 'CfnKeys', '

                    ', !GetAtt [CfnKeys, SecretAccessKey]]]
              mode: '000600'
              owner: root
              group: root
          commands:
            00install_aws:
              command: [perl, /home/ec2-user/tools/aws, --install]
            01run_bees:
              command: [su, ec2-user, -c, ./run-bees]
              cwd: /home/ec2-user
              test: [test, 'true', '=', !Ref 'RunTests']
    Properties:
      SecurityGroups: [!Ref 'ControllerSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [AWSRegionPlatform2AMI, !Ref 'AWS::Region', amzn]
      InstanceType: !Ref 'BeesControllerInstanceType'
      Tags:
      - Key: Name
        Value: bees-controller
      UserData: !Base64
        Fn::Join:
        - ''
        - - '#!/bin/bash

            '
          - 'yum update -y aws-cfn-bootstrap

            '
          - '/opt/aws/bin/cfn-init -v -s '
          - !Ref 'AWS::StackName'
          - ' -r BeeController --access-key '
          - !Ref 'CfnKeys'
          - ' --secret-key '
          - !GetAtt [CfnKeys, SecretAccessKey]
          - ' --region '
          - !Ref 'AWS::Region'
          - '

            '
          - /opt/aws/bin/cfn-signal -e $? '
          - !Ref 'ControllerHandle'
          - '''

            '
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      AvailabilityZones: !GetAZs ''
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: HTTP
        InstanceProtocol: HTTP
      HealthCheck:
        Target: HTTP:80/
        HealthyThreshold: '2'
        UnhealthyThreshold: '10'
        Interval: '30'
        Timeout: '5'
  AppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones: !GetAZs ''
      LaunchConfigurationName: !Ref 'LaunchConfig'
      MinSize: !Ref 'AppInstanceCountMin'
      MaxSize: !Ref 'AppInstanceCountMax'
      DesiredCapacity: !Ref 'AppInstanceCountDesired'
      LoadBalancerNames: [!Ref 'ElasticLoadBalancer']
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              nginx: []
          services:
            sysvinit:
              nginx:
                enabled: 'true'
                ensureRunning: 'true'
                packages:
                  yum: [nginx]
    Properties:
      SpotPrice: !Ref 'SpotPrice'
      ImageId: !FindInMap [AWSRegionPlatform2AMI, !Ref 'AWS::Region', amzn]
      UserData: !Base64
        Fn::Join:
        - ''
        - - '#!/bin/bash

            '
          - 'yum update -y aws-cfn-bootstrap

            '
          - '/opt/aws/bin/cfn-init -v -s '
          - !Ref 'AWS::StackName'
          - ' -r LaunchConfig --access-key '
          - !Ref 'CfnKeys'
          - ' --secret-key '
          - !GetAtt [CfnKeys, SecretAccessKey]
          - ' --region '
          - !Ref 'AWS::Region'
          - '

            '
      SecurityGroups: [!Ref 'AppSecurityGroup']
      InstanceType: !Ref 'AppInstanceType'
      KeyName: !Ref 'KeyName'
  ControllerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
  BeeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        SourceSecurityGroupName: !Ref 'ControllerSecurityGroup'
  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable tcp access on the inbound port for ELB and SSH from
        outside
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        SourceSecurityGroupOwnerId: !GetAtt [ElasticLoadBalancer, SourceSecurityGroup.OwnerAlias]
        SourceSecurityGroupName: !GetAtt [ElasticLoadBalancer, SourceSecurityGroup.GroupName]
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref 'SSHLocation'
  ControllerHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  ControllerCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: BeeController
    Properties:
      Handle: !Ref 'ControllerHandle'
      Timeout: '900'
Outputs:
  WebsiteURL:
    Description: URL of website under test
    Value: !Join ['', ['http://', !GetAtt [ElasticLoadBalancer, DNSName]]]
  BeeControllerAddress:
    Description: Public address of the bees controller
    Value: !GetAtt [BeeController, PublicDnsName]
  TestResultsURL:
    Value: !Join ['', ['https://', !GetAtt [ResultBucket, DomainName], /swarm-results.tar.gz]]
    Description: URL of Results file
