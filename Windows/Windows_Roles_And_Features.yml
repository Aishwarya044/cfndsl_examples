AWSTemplateFormatVersion: '2010-09-09'
Description: This template enables roles and features of Windows Server. **WARNING**
  This template creates Amazon EC2 Windows instance and related resources. You will
  be billed for the AWS resources used if you create a stack from this template.
Parameters:
  KeyPairName:
    Description: Name of an existing Amazon EC2 key pair for RDP access
    Type: String
  InstanceType:
    Description: Amazon EC2 instance type
    Type: String
    Default: m1.large
    AllowedValues: [m1.small, m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge,
      m2.4xlarge, c1.medium, c1.xlarge]
  Roles:
    Description: A SPACE seperated list of roles that you want to enable on this instance.
      Valid values are AD-Certificate, AD-Domain-Services, ADLDS, DHCP, DNS, Fax,
      File-Services, NPAS, Print-Services, Web-Server, and WDS.
    Type: String
    Default: None
    AllowedPattern: (((AD\-Certificate)|(AD\-Domain\-Services)|(ADLDS)|(DHCP)|(DNS)|(Fax)|(File\-Services)|(NPAS)|(Print\-Services)|(Web\-Server)|(WDS))(
      ((AD\-Certificate)|(AD\-Domain\-Services)|(ADLDS)|(DHCP)|(DNS)|(Fax)|(File\-Services)|(NPAS)|(Print\-Services)|(Web\-Server)|(WDS)))*)|(None)
  Features:
    Description: A SPACE seperated list of features that you want to enable on this
      instance. Valid values are NET-Framework, BITS, BitLocker, BranchCache, CMAK,
      Desktop-Experience, DAMC, Failover-Clustering, GPMC, Ink-Handwriting, Internet-Print-Client,
      ISNS, LPR-Port-Monitor, MSMQ, Multipath-IO, NLB, PNRP, qWave, Remote-Assistance,
      RDC, RPC-over-HTTP-Proxy, Simple-TCPIP, SMTP-Server, SNMP-Services, Storage-Mgr-SANS,
      Subsystem-UNIX-Apps, Telnet-Client, Telnet-Server, TFTP-Client, Biometric-Framework,
      Windows-Internal-DB, PowerShell-ISE, Backup-Features, Migration, WSRM, TIFF-IFilter,
      WinRM-IIS-Ext, WINS-Server, Wireless-Networking, and XPS-Viewer.
    Type: String
    Default: None
    AllowedPattern: (((NET\-Framework)|(BITS)|(BitLocker)|(BranchCache)|(CMAK)|(Desktop\-Experience)|(DAMC)|(Failover\-Clustering)|(GPMC)|(Ink\-Handwriting)|(Internet\-Print\-Client)|(ISNS)|(LPR\-Port\-Monitor)|(MSMQ)|(Multipath\-IO)|(NLB)|(PNRP)|(qWave)|(Remote\-Assistance)|(RDC)|(RPC\-over\-HTTP\-Proxy)|(Simple\-TCPIP)|(SMTP\-Server)|(SNMP\-Services)|(Storage\-Mgr\-SANS)|(Subsystem\-UNIX\-Apps)|(Telnet\-Client)|(Telnet\-Server)|(TFTP\-Client)|(Biometric\-Framework)|(Windows\-Internal\-DB)|(PowerShell\-ISE)|(Backup\-Features)|(Migration)|(WSRM)|(TIFF\-IFilter)|(WinRM\-IIS\-Ext)|(WINS\-Server)|(Wireless\-Networking)|(XPS\-Viewer))(
      ((NET\-Framework)|(BITS)|(BitLocker)|(BranchCache)|(CMAK)|(Desktop\-Experience)|(DAMC)|(Failover\-Clustering)|(GPMC)|(Ink\-Handwriting)|(Internet\-Print\-Client)|(ISNS)|(LPR\-Port\-Monitor)|(MSMQ)|(Multipath\-IO)|(NLB)|(PNRP)|(qWave)|(Remote\-Assistance)|(RDC)|(RPC\-over\-HTTP\-Proxy)|(Simple\-TCPIP)|(SMTP\-Server)|(SNMP\-Services)|(Storage\-Mgr\-SANS)|(Subsystem\-UNIX\-Apps)|(Telnet\-Client)|(Telnet\-Server)|(TFTP\-Client)|(Biometric\-Framework)|(Windows\-Internal\-DB)|(PowerShell\-ISE)|(Backup\-Features)|(Migration)|(WSRM)|(TIFF\-IFilter)|(WinRM\-IIS\-Ext)|(WINS\-Server)|(Wireless\-Networking)|(XPS\-Viewer)))*(
      )*)|(None)
Mappings:
  AWSInstanceType2Arch:
    m1.small:
      Arch: '64'
    m1.medium:
      Arch: '64'
    m1.large:
      Arch: '64'
    m1.xlarge:
      Arch: '64'
    m2.xlarge:
      Arch: '64'
    m2.2xlarge:
      Arch: '64'
    m2.4xlarge:
      Arch: '64'
    c1.medium:
      Arch: '64'
    c1.xlarge:
      Arch: '64'
  AWSRegionArch2AMI:
    us-east-1:
      '64': ami-5f42c036
    us-west-2:
      '64': ami-1679f126
    us-west-1:
      '64': ami-5eb7961b
    eu-west-1:
      '64': ami-8e969bfa
    ap-southeast-1:
      '64': ami-b8f8bbea
    ap-southeast-2:
      '64': ami-a740d79d
    ap-northeast-1:
      '64': ami-2210a823
    sa-east-1:
      '64': ami-9fc41c82
Resources:
  IAMUser:
    Type: AWS::IAM::User
    Properties:
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: CloudFormation:DescribeStackResource
            Resource: '*'
  IAMUserAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref 'IAMUser'
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp: 0.0.0.0/0
  WindowsServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-credentials:
              content: !Join ['', [AWSAccessKeyId=, !Ref 'IAMUserAccessKey', '

                    ', AWSSecretKey=, !GetAtt [IAMUserAccessKey, SecretAccessKey],
                  '

                    ']]
            c:\cfn\cfn-hup.conf:
              content: !Join ['', ['[main]

                    ', stack=, !Ref 'AWS::StackName', '

                    ', 'credential-file=c:\cfn\cfn-credentials

                    ', region=, !Ref 'AWS::Region', '

                    ']]
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content: !Join ['', ['[cfn-auto-reloader-hook]

                    ', 'triggers=post.update

                    ', 'path=Resources.WindowsServer.Metadata.AWS::CloudFormation::Init

                    ', 'action=cfn-init.exe -v -s ', !Ref 'AWS::StackName', ' -r WindowsServer',
                  ' --credential-file c:\cfn\cfn-credentials', ' --region ', !Ref 'AWS::Region',
                  '

                    ']]
          commands:
            1-install-roles:
              command: !Join ['', [if not "None" EQU ", !Ref 'Roles', '" (servermanagercmd
                    -install ', !Ref 'Roles', ' -restart)']]
            2-install-features:
              command: !Join ['', [if not "None" EQU ", !Ref 'Features', '" (servermanagercmd
                    -install ', !Ref 'Features', ' -restart)']]
            3-signal-success:
              command: !Join ['', [cfn-signal.exe -e %ERRORLEVEL% ", !Ref 'WindowsServerWaitHandle',
                  '"']]
    Properties:
      InstanceType: !Ref 'InstanceType'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      KeyName: !Ref 'KeyPairName'
      UserData: !Base64
        Fn::Join:
        - ''
        - - '<script>

            '
          - 'cfn-init.exe -v -s '
          - !Ref 'AWS::StackName'
          - ' -r WindowsServer'
          - ' --access-key '
          - !Ref 'IAMUserAccessKey'
          - ' --secret-key '
          - !GetAtt [IAMUserAccessKey, SecretAccessKey]
          - ' --region '
          - !Ref 'AWS::Region'
          - '

            '
          - SCHTASKS /Create /SC MINUTE /MO 10 /TN cfn-hup /RU SYSTEM /TR "cfn-hup.exe
            -v --no-daemon"
          - '

            '
          - </script>
  WindowsServerWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  WindowsServerWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: WindowsServer
    Properties:
      Handle: !Ref 'WindowsServerWaitHandle'
      Timeout: '1800'
Outputs:
  RolesEnabled:
    Value: !Ref 'Roles'
    Description: Roles enabled on this instance.
  FeaturesEnabled:
    Value: !Ref 'Features'
    Description: Features enabled on this instance.
